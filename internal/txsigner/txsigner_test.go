// nolint
package txsigner

import (
	"encoding/hex"
	"encoding/json"
	"testing"

	"github.com/btcsuite/btcd/chaincfg"
	"github.com/dig-coins/btcconnect/internal/share"
	"github.com/dig-coins/btcconnect/internal/utl"
	hdwallet "github.com/dig-coins/hd-wallet"
	"github.com/stretchr/testify/assert"
)

var _uTConfig *utl.UTConfig

func TestMain(m *testing.M) {
	_uTConfig = utl.Setup()

	m.Run()
}

func utNewTxSinger(t *testing.T) *TxSigner {
	return utNewTxSingerEx(t, "../../datas/eseeds.dat")
}

func utNewTxSinger1(t *testing.T) *TxSigner {
	return utNewTxSingerEx(t, "../../datas/eseed-1.dat")
}

func utNewTxSinger2(t *testing.T) *TxSigner {
	return utNewTxSingerEx(t, "../../datas/eseed-2.dat")
}

func utNewTxSingerEx(t *testing.T, seedFileName string) *TxSigner {
	signer, err := NewTxSigner(hdwallet.BTCTestnet, &chaincfg.TestNet3Params, seedFileName,
		_uTConfig.GetSSeedsFileSecKey(t), map[string]*share.MultiSignAddressInfo{
			"2N59MZ6kPV1qWvahhUzDzZGXo4ZsjAmF14i": {
				PublicKeys: []string{
					"02f410e07213396b8d6289ca6f1c217380a2787db5a7487b0978bd792cbd32343e",
					"028e7bbb364b64687db98ad39674e70c194aa01ef3da3148791536f25ab8861c02",
					"037cb184baf184ec6d3f24c927c6243dbb122ae7f9353425f84f3dfcd95fdcd0f9",
					"037f9e1716a16efb9cf977a628942a5ee193aa29d31d99a6ddbb80d1d7dd69b5da",
				},
				MinSignNum: 3,
			},
		})
	assert.Nil(t, err)

	return signer
}

func TestTxSigner(t *testing.T) {
	signer := utNewTxSinger(t)

	wpi := "7b22696e70757473223a5b7b2254784944223a2239376561366337376365316631383438636534653433353438333338346664373331626364323766303762373663613463633332663736353862313031653536222c22564f7574223a312c2241646472657373223a226d77733455465250385845384a687765586867794d476b56505a66434d5346676d78222c22416d6f756e74223a34323435312c2252656465656d536372697074223a22227d5d2c226f757470757473223a5b7b2241646472657373223a2274623171383868303667787135636770793536363833326436717a637961657937786864646c32686574222c22416d6f756e74223a313030307d2c7b2241646472657373223a226d77733455465250385845384a687765586867794d476b56505a66434d5346676d78222c22416d6f756e74223a34313232327d5d7d"

	d, err := hex.DecodeString(wpi)
	assert.Nil(t, err)

	var m map[string]any
	err = json.Unmarshal(d, &m)
	assert.Nil(t, err)
	d, err = json.MarshalIndent(m, "", "\t")
	assert.Nil(t, err)
	t.Log(string(d))

	signedTxHex, rIsMultiSignMidTx, err := signer.SignTx(wpi)
	assert.Nil(t, err)
	assert.False(t, rIsMultiSignMidTx)

	t.Log(signedTxHex)
}

func TestTxSigner1_Create(t *testing.T) {
	signer := utNewTxSinger1(t)

	wpi := "7b22696e70757473223a5b7b2254784944223a2237356461623062376663636231323963333634393835303736363637366463323031373932366534363366363338313435333632346235386362633065623861222c22564f7574223a302c2241646472657373223a22324e35394d5a366b505631715776616868557a447a5a47586f345a736a416d46313469222c22416d6f756e74223a37303030302c2252656465656d536372697074223a223533323130326634313065303732313333393662386436323839636136663163323137333830613237383764623561373438376230393738626437393263626433323334336532313032386537626262333634623634363837646239386164333936373465373063313934616130316566336461333134383739313533366632356162383836316330323231303337636231383462616631383465633664336632346339323763363234336462623132326165376639333533343235663834663364666364393566646364306639323130333766396531373136613136656662396366393737613632383934326135656531393361613239643331643939613664646262383064316437646436396235646135346165227d2c7b2254784944223a2261393937666638656136306438396462373637666161316539636431326234663536343532336565366239333563323064363736313136336134626536663463222c22564f7574223a302c2241646472657373223a2274623171383868303667787135636770793536363833326436717a637961657937786864646c32686574222c22416d6f756e74223a313030302c2252656465656d536372697074223a22227d5d2c226f757470757473223a5b7b2241646472657373223a226d77733455465250385845384a687765586867794d476b56505a66434d5346676d78222c22416d6f756e74223a37303130307d2c7b2241646472657373223a22324e35394d5a366b505631715776616868557a447a5a47586f345a736a416d46313469222c22416d6f756e74223a3334387d5d7d"

	d, err := hex.DecodeString(wpi)
	assert.Nil(t, err)

	var m map[string]any
	err = json.Unmarshal(d, &m)
	assert.Nil(t, err)
	d, err = json.MarshalIndent(m, "", "\t")
	assert.Nil(t, err)
	t.Log(string(d))

	signedTxHex, rAllSigned, err := signer.SignTx(wpi)
	assert.Nil(t, err)

	t.Log(rAllSigned)
	t.Log(signedTxHex)
}

func TestTxSigner2_Update(t *testing.T) {
	signer := utNewTxSinger2(t)

	wpi := "7b22556e7369676e65645478486578223ac22556e636f6d706c65746564486578223ac225478486578223ad"

	d, err := hex.DecodeString(wpi)
	assert.Nil(t, err)

	var m map[string]any
	err = json.Unmarshal(d, &m)
	assert.Nil(t, err)
	d, err = json.MarshalIndent(m, "", "\t")
	assert.Nil(t, err)
	t.Log(string(d))

	signedTxHex, rAllSigned, err := signer.UpdateMiddleSignedTxHex(wpi)
	assert.Nil(t, err)

	t.Log(rAllSigned)
	t.Log(signedTxHex)
}
