package txsigner

import (
	"encoding/hex"
	"encoding/json"
	"testing"

	"github.com/btcsuite/btcd/chaincfg"
	"github.com/dig-coins/btcconnect/internal/share"
	"github.com/dig-coins/btcconnect/internal/utl"
	hdwallet "github.com/dig-coins/hd-wallet"
	"github.com/stretchr/testify/assert"
)

var _uTConfig *utl.UTConfig

func TestMain(m *testing.M) {
	_uTConfig = utl.Setup()

	m.Run()
}

func utNewTxSinger(t *testing.T) *TxSigner {
	signer, err := NewTxSigner(hdwallet.BTCTestnet, &chaincfg.TestNet3Params, "../../datas/eseeds.dat",
		_uTConfig.GetSSeedsFileSecKey(t), map[string]*share.MultiSignAddressInfo{
			"2N59MZ6kPV1qWvahhUzDzZGXo4ZsjAmF14i": {
				PublicKeys: []string{
					"02f410e07213396b8d6289ca6f1c217380a2787db5a7487b0978bd792cbd32343e",
					"028e7bbb364b64687db98ad39674e70c194aa01ef3da3148791536f25ab8861c02",
					"037cb184baf184ec6d3f24c927c6243dbb122ae7f9353425f84f3dfcd95fdcd0f9",
					"037f9e1716a16efb9cf977a628942a5ee193aa29d31d99a6ddbb80d1d7dd69b5da",
				},
				MinSignNum: 3,
			},
		})
	assert.Nil(t, err)

	return signer
}

func TestTxSigner(t *testing.T) {
	signer := utNewTxSinger(t)

	wpi := "7b22696e70757473223a5b7b2254784944223a2234386335386264663339356332333531333838616433663363653765613537383565663039316632373734636134333964316439363832633534666336636531222c22564f7574223a312c2241646472657373223a22324e35394d5a366b505631715776616868557a447a5a47586f345a736a416d46313469222c22416d6f756e74223a31323333392c2252656465656d536372697074223ad2c7b2254784944223a2236643238353365643237363834656131623332623738643363346333376130376530323232353262316137656331633565656265613864653865356362313164222c22564f7574223a312c2241646472657373223a22324e35394d5a366b505631715776616868557a447a5a47586f345a736a416d46313469222c22416d6f756e74223a33343333342c2252656465656d536372697074223ad2c7b2254784944223a2261323332333064313336343363303962646661376264363633346637353262353265356364383230616164356335386238663637376639356361373861613437222c22564f7574223a312c2241646472657373223a2274623171383868303667787135636770793536363833326436717a637961657937786864646c32686574222c22416d6f756e74223a393835362c2252656465656d536372697074223a22227d2c7b2254784944223a2233613832656463326165663765663832616562393862346135373961666266396131346338303361636165373666636330316238393739343032613063633761222c22564f7574223a302c2241646472657373223a2274623171383868303667787135636770793536363833326436717a637961657937786864646c32686574222c22416d6f756e74223a31303030302c2252656465656d536372697074223a22227d5d2c226f757470757473223a5b7b2241646472657373223a226d77733455465250385845384a687765586867794d476b56505a66434d5346676d78222c22416d6f756e74223a36303030307d2c7b2241646472657373223a22324e35394d5a366b505631715776616868557a447a5a47586f345a736a416d46313469222c22416d6f756e74223a353530357d5d7d"

	d, err := hex.DecodeString(wpi)
	assert.Nil(t, err)

	var m map[string]any
	err = json.Unmarshal([]byte(d), &m)
	assert.Nil(t, err)
	d, err = json.MarshalIndent(m, "", "\t")
	assert.Nil(t, err)
	t.Log(string(d))

	signedTxHex, rIsMultiSignMidTx, err := signer.GetSignedTxHex(wpi)
	assert.Nil(t, err)
	assert.False(t, rIsMultiSignMidTx)

	t.Log(signedTxHex)
}
